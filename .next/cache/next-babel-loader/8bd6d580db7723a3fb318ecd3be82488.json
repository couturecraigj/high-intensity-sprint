{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from \"react\";\n\nvar useInput = function useInput() {\n  var wrapper = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (v) {\n    return v;\n  };\n\n  var _useState = useState(wrapper(\"\")),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  return [value, function (e) {\n    return setValue(wrapper(e.target.value));\n  }];\n};\n\nvar useDistance = function useDistance() {\n  function calculateDistance(lat1, lon1, lat2, lon2) {\n    var unit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"K\";\n\n    if (lat1 == lat2 && lon1 == lon2) {\n      return 0;\n    } else {\n      var radlat1 = Math.PI * lat1 / 180;\n      var radlat2 = Math.PI * lat2 / 180;\n      var theta = lon1 - lon2;\n      var radtheta = Math.PI * theta / 180;\n      var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\n      if (dist > 1) {\n        dist = 1;\n      }\n\n      dist = Math.acos(dist);\n      dist = dist * 180 / Math.PI;\n      dist = dist * 60 * 1.1515;\n\n      if (unit == \"K\") {\n        dist = dist * 1.609344;\n      }\n\n      if (unit == \"N\") {\n        dist = dist * 0.8684;\n      }\n\n      return dist;\n    }\n  }\n\n  var _useState2 = useState(),\n      distance = _useState2[0],\n      setDistance = _useState2[1];\n\n  var _useState3 = useState([]),\n      lastGeopoint = _useState3[0],\n      setLastGeopoint = _useState3[1];\n\n  var _useState4 = useState(),\n      started = _useState4[0],\n      setStarted = _useState4[1];\n\n  var _useState5 = useState(),\n      rafId = _useState5[0],\n      setRafId = _useState5[1];\n\n  var _useState6 = useState(),\n      finished = _useState6[0],\n      setFinished = _useState6[1];\n\n  var start = function start(geopoint) {\n    setFinished(false);\n    setLastGeopoint(geopoint);\n    setDistance(0);\n    setStarted(true);\n    cancelAnimationFrame(rafId);\n  };\n\n  var finish = function finish() {\n    setLastGeopoint();\n    setFinished(true);\n    cancelAnimationFrame(rafId);\n  };\n\n  var addGeopoint = function addGeopoint(coords) {\n    if (finished) return;\n    setLastGeopoint(coords);\n  };\n\n  var addDistance = function addDistance(newDistance) {\n    if (finished) return;\n    setDistance(distance + newDistance);\n  };\n\n  var updateTraveled = function updateTraveled(geopoint) {\n    return function () {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        if (geopoint) {\n          addDistance(calculateDistance(geopoint.latitude, geopoint.longitude, position.coords.latitude, position.coords.longitude));\n        }\n\n        console.log(geopoint);\n        addGeopoint(position.coords);\n      }, console.error);\n    };\n  };\n\n  useEffect(function () {\n    if (started && !finished) {\n      setRafId(requestAnimationFrame(updateTraveled(lastGeopoint)));\n    }\n\n    if (finished) {\n      cancelAnimationFrame(rafId);\n    }\n\n    if (!lastGeopoint) {\n      cancelAnimationFrame(rafId);\n    }\n  }, [started, finished, lastGeopoint]);\n  return [distance, start, finish];\n};\n\nvar useTimer = function useTimer() {\n  var _useState7 = useState(),\n      timePassed = _useState7[0],\n      setTimePassed = _useState7[1];\n\n  var _useState8 = useState(),\n      startTime = _useState8[0],\n      setStartTime = _useState8[1];\n\n  var _useState9 = useState(),\n      endTime = _useState9[0],\n      setEndTime = _useState9[1];\n\n  var _useState10 = useState(),\n      rafId = _useState10[0],\n      setRafId = _useState10[1];\n\n  var startTimer = function startTimer() {\n    setEndTime(undefined);\n    setStartTime(performance.now());\n  };\n\n  var stopTimer = function stopTimer() {\n    setEndTime(performance.now());\n  };\n\n  var updateTimePassed = function updateTimePassed(timeStamp) {\n    setTimePassed(timeStamp - startTime);\n  };\n\n  useEffect(function () {\n    if (startTime && !endTime) {\n      setRafId(requestAnimationFrame(updateTimePassed));\n    }\n\n    if (endTime) {\n      cancelAnimationFrame(rafId);\n    }\n  }, [timePassed, startTime, endTime]);\n  return [timePassed, startTimer, stopTimer];\n};\n\nvar HomePage = function HomePage() {\n  var _useState11 = useState(),\n      speed = _useState11[0],\n      setSpeed = _useState11[1];\n\n  var _useInput = useInput(function (v) {\n    return +v;\n  }),\n      _useInput2 = _slicedToArray(_useInput, 2),\n      lengthOfSprint = _useInput2[0],\n      setLengthOfSprint = _useInput2[1];\n\n  var _useInput3 = useInput(function (v) {\n    return +v;\n  }),\n      _useInput4 = _slicedToArray(_useInput3, 2),\n      lengthOfBreak = _useInput4[0],\n      setLengthOfBreak = _useInput4[1];\n\n  var _useState12 = useState(\"stop\"),\n      state = _useState12[0],\n      setState = _useState12[1];\n\n  var _useState13 = useState(),\n      watchId = _useState13[0],\n      setWatchId = _useState13[1];\n\n  var _useTimer = useTimer(),\n      _useTimer2 = _slicedToArray(_useTimer, 3),\n      timePassed = _useTimer2[0],\n      startTimer = _useTimer2[1],\n      stopTimer = _useTimer2[2];\n\n  var _useDistance = useDistance(),\n      _useDistance2 = _slicedToArray(_useDistance, 3),\n      distance = _useDistance2[0],\n      startDistance = _useDistance2[1],\n      stopDistance = _useDistance2[2];\n\n  var stop = function stop() {\n    stopTimer();\n    stopDistance();\n  };\n\n  var start = function start(geopoint) {\n    startTimer();\n    startDistance(geopoint);\n  };\n\n  useEffect(function () {\n    if (lengthOfSprint && timePassed >= lengthOfSprint) {\n      stop();\n    }\n  }, [lengthOfSprint, timePassed]);\n  useEffect(function () {\n    navigator.geolocation.clearWatch(watchId);\n\n    if (state === \"start\") {\n      start();\n    }\n\n    if (state === \"stop\") {\n      stop();\n    }\n\n    if (state === \"activateOnMove\") {\n      setWatchId(navigator.geolocation.watchPosition(function (position) {\n        if (position.coords.speed) {\n          setSpeed(position.coords.speed);\n          start(position.coords);\n        }\n      }));\n    }\n  }, [state]);\n  return __jsx(\"div\", null, __jsx(\"div\", null, timePassed ? timePassed.toFixed(2) : \"\"), speed && __jsx(\"div\", null, speed), !!distance && __jsx(\"div\", null, \"Traveled: \".concat(distance, \"KM\")), __jsx(\"div\", null, __jsx(\"label\", null, \"How long would you like to sprint?\", __jsx(\"div\", null, __jsx(\"input\", {\n    value: lengthOfSprint,\n    onChange: setLengthOfSprint\n  })))), __jsx(\"div\", null, __jsx(\"label\", null, \"How long would you like to take a break for?\", __jsx(\"div\", null, __jsx(\"input\", {\n    value: lengthOfBreak,\n    onChange: setLengthOfBreak\n  })))), __jsx(\"div\", null, __jsx(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return setState(\"start\");\n    }\n  }, \"Start Now\"), __jsx(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return setState(\"stop\");\n    }\n  }, \"Stop Now\"), __jsx(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return setState(\"activateOnMove\");\n    }\n  }, \"Start Once I move\")));\n};\n\nexport default HomePage;","map":null,"metadata":{},"sourceType":"module"}